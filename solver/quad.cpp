
#include "DG.h"

// Note, the coordinates in the x* variables are sequential pairs x,y
//       e.g. x2 = [x21 y21  x22 y22  x23 y23]
void quad2d(int nq, double x[], double w[]){
    // Order 1 Dunavant Points
    if(nq == 1){
        double x_v[] = {
            0.333333333333333, 0.333333333333333
        };
        double w_v[] = {
            0.500000000000000
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 2 Dunavant Points
    else if(nq == 3){
        double x_v[] = {
            0.666666666666667, 0.166666666666667, 0.166666666666667, 0.166666666666667,
            0.166666666666667, 0.666666666666667
        };
        double w_v[] = {
            0.166666666666666, 0.166666666666666, 0.166666666666666
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 3 Dunavant Points
    else if(nq == 4){
        double x_v[] = {
            0.333333333333333, 0.333333333333333, 0.600000000000000, 0.200000000000000,
            0.200000000000000, 0.200000000000000, 0.200000000000000, 0.600000000000000
        };
        double w_v[] = {
            -0.281250000000000, 0.260416666666667, 0.260416666666667, 0.260416666666667
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 4 Dunavant Points
    else if(nq == 6){
        double x_v[] = {
            0.108103018168070, 0.445948490915965, 0.445948490915965, 0.445948490915965,
            0.445948490915965, 0.108103018168070, 0.816847572980459, 0.091576213509771,
            0.091576213509771, 0.091576213509771, 0.091576213509771, 0.816847572980459
    };
        double w_v[] = {
            0.111690794839005, 0.111690794839005, 0.111690794839005, 0.054975871827661,
            0.054975871827661, 0.054975871827661
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 5 Dunavant Points
    else if(nq == 7){
        double x_v[] = {
            0.333333333333333, 0.333333333333333, 0.059715871789770, 0.470142064105115,
            0.470142064105115, 0.470142064105115, 0.470142064105115, 0.059715871789770,
            0.797426985353087, 0.101286507323456, 0.101286507323456, 0.101286507323456,
            0.101286507323456, 0.797426985353087
        };
        double w_v[] = {
            0.112500000000000, 0.066197076394253, 0.066197076394253, 0.066197076394253,
            0.062969590272414, 0.062969590272414, 0.062969590272414
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 6 Dunavant Points
    else if(nq == 12){
        double x_v[] = {
            0.501426509658179, 0.249286745170910, 0.249286745170910, 0.249286745170910,
            0.249286745170910, 0.501426509658179, 0.873821971016996, 0.063089014491502,
            0.063089014491502, 0.063089014491502, 0.063089014491502, 0.873821971016996,
            0.053145049844817, 0.310352451033784, 0.310352451033784, 0.636502499121399,
            0.636502499121399, 0.053145049844817, 0.310352451033784, 0.053145049844817,
            0.636502499121399, 0.310352451033784, 0.053145049844817, 0.636502499121399
        };
        double w_v[] = {
            0.058393137863189, 0.058393137863189, 0.058393137863189, 0.025422453185103,
            0.025422453185103, 0.025422453185103, 0.041425537809187, 0.041425537809187,
            0.041425537809187, 0.041425537809187, 0.041425537809187, 0.041425537809187
         };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 7 Dunavant Points
    else if(nq == 13){
        double x_v[] = {
            0.333333333333333, 0.333333333333333, 0.479308067841920, 0.260345966079040,
            0.260345966079040, 0.260345966079040, 0.260345966079040, 0.479308067841920,
            0.869739794195568, 0.065130102902216, 0.065130102902216, 0.065130102902216,
            0.065130102902216, 0.869739794195568, 0.048690315425316, 0.312865496004874,
            0.312865496004874, 0.638444188569810, 0.638444188569810, 0.048690315425316,
            0.312865496004874, 0.048690315425316, 0.638444188569810, 0.312865496004874,
            0.048690315425316, 0.638444188569810
        };
        double w_v[] = {
            -0.074785022233841, 0.087807628716604, 0.087807628716604, 0.087807628716604,
            0.026673617804419, 0.026673617804419, 0.026673617804419, 0.038556880445128,
            0.038556880445128, 0.038556880445128, 0.038556880445128, 0.038556880445128,
            0.038556880445128
         };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 8 Dunavant Points
    else if(nq == 16){
        double x_v[] = {
            0.333333333333333, 0.333333333333333, 0.081414823414554, 0.459292588292723,
            0.459292588292723, 0.459292588292723, 0.459292588292723, 0.081414823414554,
            0.658861384496480, 0.170569307751760, 0.170569307751760, 0.170569307751760,
            0.170569307751760, 0.658861384496480, 0.898905543365938, 0.050547228317031,
            0.050547228317031, 0.050547228317031, 0.050547228317031, 0.898905543365938,
            0.008394777409958, 0.263112829634638, 0.263112829634638, 0.728492392955404,
            0.728492392955404, 0.008394777409958, 0.263112829634638, 0.008394777409958,
            0.728492392955404, 0.263112829634638, 0.008394777409958, 0.728492392955404
  }     ;
        double w_v[] = {
            0.072157803838894, 0.047545817133642, 0.047545817133642, 0.047545817133642,
            0.051608685267359, 0.051608685267359, 0.051608685267359, 0.016229248811599,
            0.016229248811599, 0.016229248811599, 0.013615157087217, 0.013615157087217,
            0.013615157087217, 0.013615157087217, 0.013615157087217, 0.013615157087217
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
     // Order 9 Dunavant Points
    else if(nq == 19){
        double x_v[] = {
             0.333333333333333, 0.333333333333333, 0.020634961602525, 0.489682519198738,
            0.489682519198738, 0.489682519198738, 0.489682519198738, 0.020634961602525,
            0.125820817014127, 0.437089591492937, 0.437089591492937, 0.437089591492937,
            0.437089591492937, 0.125820817014127, 0.623592928761935, 0.188203535619033,
            0.188203535619033, 0.188203535619033, 0.188203535619033, 0.623592928761935,
            0.910540973211095, 0.044729513394453, 0.044729513394453, 0.044729513394453,
            0.044729513394453, 0.910540973211095, 0.036838412054736, 0.221962989160766,
            0.221962989160766, 0.741198598784498, 0.741198598784498, 0.036838412054736,
            0.221962989160766, 0.036838412054736, 0.741198598784498, 0.221962989160766,
            0.036838412054736, 0.7411985987844
        };
        double w_v[] = {
            0.048567898141400, 0.015667350113570, 0.015667350113570, 0.015667350113570,
            0.038913770502387, 0.038913770502387, 0.038913770502387, 0.039823869463605,
            0.039823869463605, 0.039823869463605, 0.012788837829349, 0.012788837829349,
            0.012788837829349, 0.021641769688645, 0.021641769688645, 0.021641769688645,
            0.021641769688645, 0.021641769688645, 0.021641769688645
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
    // Order 13 Dunavant Points
    else if(nq == 37){
        double x_v[] = {
            0.333333333333333, 0.333333333333333, 0.009903630120591, 0.495048184939705,
            0.495048184939705, 0.495048184939705, 0.495048184939705, 0.009903630120591,
            0.062566729780852, 0.468716635109574, 0.468716635109574, 0.468716635109574,
            0.468716635109574, 0.062566729780852, 0.170957326397447, 0.414521336801277,
            0.414521336801277, 0.414521336801277, 0.414521336801277, 0.170957326397447,
            0.541200855914337, 0.229399572042831, 0.229399572042831, 0.229399572042831,
            0.229399572042831, 0.541200855914337, 0.771151009607340, 0.114424495196330,
            0.114424495196330, 0.114424495196330, 0.114424495196330, 0.771151009607340,
            0.950377217273082, 0.024811391363459, 0.024811391363459, 0.024811391363459,
            0.024811391363459, 0.950377217273082, 0.094853828379579, 0.268794997058761,
            0.268794997058761, 0.636351174561660, 0.636351174561660, 0.094853828379579,
            0.268794997058761, 0.094853828379579, 0.636351174561660, 0.268794997058761,
            0.094853828379579, 0.636351174561660, 0.018100773278807, 0.291730066734288,
            0.291730066734288, 0.690169159986905, 0.690169159986905, 0.018100773278807,
            0.291730066734288, 0.018100773278807, 0.690169159986905, 0.291730066734288,
            0.018100773278807, 0.690169159986905, 0.022233076674090, 0.126357385491669,
            0.126357385491669, 0.851409537834241, 0.851409537834241, 0.022233076674090,
            0.126357385491669, 0.022233076674090, 0.851409537834241, 0.126357385491669,
            0.022233076674090, 0.851409537834241
        };
        double w_v[] = {
            0.026260461700401, 0.005640072604665, 0.005640072604665, 0.005640072604665,
            0.015711759181227, 0.015711759181227, 0.015711759181227, 0.023536251252097,
            0.023536251252097, 0.023536251252097, 0.023681793268178, 0.023681793268178,
            0.023681793268178, 0.015583764522897, 0.015583764522897, 0.015583764522897,
            0.003987885732537, 0.003987885732537, 0.003987885732537, 0.018424201364366,
            0.018424201364366, 0.018424201364366, 0.018424201364366, 0.018424201364366,
            0.018424201364366, 0.008700731651911, 0.008700731651911, 0.008700731651911,
            0.008700731651911, 0.008700731651911, 0.008700731651911, 0.007760893419522,
            0.007760893419522, 0.007760893419522, 0.007760893419522, 0.007760893419522,
            0.007760893419522
        };
        for(int i=0;i<nq*2;i++){
            x[i] = x_v[i];
        }
        for(int i=0;i<nq;i++){
            w[i] = w_v[i];
        }
    }
}


void quad1d(int q, double x[], double w[]){
      // Order 1 Gauss-Legendre points
    if(q == 1){
        double x_v[] = {
            0.500000000000000
        };
        double w_v[] = {
            1.000000000000000
        };
        int n =1;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
    // Order 3 Gauss-Legendre points
    else if(q == 2 ){
        double x_v[] = {
            0.211324865405187, 0.788675134594813
        };
        double w_v[] = {
            0.500000000000000, 0.500000000000000
        };
        int n = 2;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
    // Order 5 Gauss-Legendre points
    else if(q == 3 ){
        double x_v[] = {
            0.112701665379258, 0.500000000000000, 0.887298334620742
        };
        double w_v[] = {
            0.277777777777778, 0.444444444444444, 0.277777777777778
        };
        int n = 3;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
    // Order 7 Gauss-Legendre points
    else if(q == 4){
        double x_v[] = {
            0.069431844202974, 0.330009478207572, 0.669990521792428, 0.930568155797026
        };
        double w_v[] = {
            0.173927422568727, 0.326072577431273, 0.326072577431273, 0.173927422568727
        };
        int n = 4;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
    // Order 9 Gauss-Legendre points
    else if(q == 5){
        double x_v[] = {
            0.046910077030668, 0.230765344947158, 0.500000000000000, 0.769234655052841, 0.953089922969332
        };
        double w_v[] = {
            0.118463442528095, 0.239314335249683, 0.284444444444444, 0.239314335249683, 0.118463442528095
        };
        int n = 5;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
    // Order 11 Gauss-Legendre points
    else if(q == 6){
        double x_v[] = {
           0.033765242898424, 0.169395306766868, 0.380690406958402, 0.619309593041598,
            0.830604693233132, 0.966234757101576};
        double w_v[] = {
            0.085662246189585, 0.180380786524069, 0.233956967286345, 0.233956967286345,
            0.180380786524069, 0.085662246189585
        };
        int n = 6;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
    // Order 15 Gauss-Legendre points
    else if(q == 8){
        double x_v[] = {
           0.019855071751232, 0.101666761293187, 0.237233795041836, 0.408282678752175,
            0.591717321247825, 0.762766204958164, 0.898333238706813, 0.980144928248768};
        double w_v[] = {
            0.050614268145188, 0.111190517226687, 0.156853322938944, 0.181341891689181,
            0.181341891689181, 0.156853322938944, 0.111190517226687, 0.050614268145188
        };
        int n = 8;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
    // Order 25 Gauss-Legendre points
    else if(q == 13){
        double x_v[] = {
           0.007908472640706, 0.041200800388511, 0.099210954633345, 0.178825330279830,
            0.275753624481777, 0.384770842022433, 0.500000000000000, 0.615229157977567,
            0.724246375518223, 0.821174669720170, 0.900789045366655, 0.958799199611489,
            0.992091527359294};
        double w_v[] = {
            0.020242002382658, 0.046060749918864, 0.069436755109894, 0.089072990380973,
            0.103908023768444, 0.113141590131449, 0.116275776615437, 0.113141590131449,
            0.103908023768444, 0.089072990380973, 0.069436755109894, 0.046060749918864,
            0.020242002382658
        };
        int n = 13;
        for(int i=0; i<n; i++){
            x[i] = x_v[i];
        }
        for(int i=0; i<n; i++){
            w[i] = w_v[i];
        }
    }
}


void basis_2d(int np, double phi[],int quad_i, double xi, double eta){
    if(np==1){
        phi[quad_i] = 1.;
    }
    else if(np == 3){
        phi[quad_i*np] = 1. - xi - eta;
        phi[quad_i*np+1] = xi;
        phi[quad_i*np+2] = eta;
    }
    else if(np == 6){
        phi[quad_i*np+0] = 1 - 3*xi + 2*pow(xi,2) - 3*eta + 4*xi*eta + 2*pow(eta,2);
        phi[quad_i*np+1] = 4*xi - 4*pow(xi,2)-4*xi*eta;
        phi[quad_i*np+2] = -xi+2*pow(xi,2);
        phi[quad_i*np+3] = 4*eta - 4*xi*eta-4*pow(eta,2);
        phi[quad_i*np+4] = 4*xi*eta;
        phi[quad_i*np+5] = -eta + 2*pow(eta,2);
    }
}


void dphi_calc(int np, double dphi[],int quad_i, double xi, double eta){
    if(np==1){
        dphi[quad_i*np*2] = 0, dphi[quad_i*np*2+1] = 0;
    }
    else if(np==3){
        dphi[quad_i*np*2] = -1. , dphi[quad_i*np*2+1] = -1.;
        dphi[quad_i*np*2+2] = 1., dphi[quad_i*np*2+3] = 0.;
        dphi[quad_i*np*2+4] = 0., dphi[quad_i*np*2+5] = 1.;
        
    }
    else if(np==6){
        dphi[quad_i*np*2] = -3.+4.*xi+4.*eta , dphi[quad_i*np*2+1] = -3.+4.*xi+4.*eta;
        dphi[quad_i*np*2+2] = 4. - 8.*xi - 4*eta, dphi[quad_i*np*2+3] = -4.*xi;
        dphi[quad_i*np*2+4] = -1.+4*xi, dphi[quad_i*np*2+5] = 0.;
        dphi[quad_i*np*2+6] = -4.*eta , dphi[quad_i*np*2+7] = 4.-4.*xi-8.*eta;
        dphi[quad_i*np*2+8] = 4.*eta, dphi[quad_i*np*2+9] = 4.*xi;
        dphi[quad_i*np*2+10] = 0, dphi[quad_i*np*2+11] = -1.+4*eta;
    }
}




void Jacobian_linear(int N_elem, int E[], double V[], double J[], double J_inv[], double det[]){
    int n1,n2,n3;
    double x1,y1,x2,y2,x3,y3;
    for(int k=0;k<N_elem;k++){
        n1 = E[3*k];
        n2 = E[3*k+1];
        n3 = E[3*k+2];
        x1 = V[2*n1], y1 = V[2*n1+1];
        x2 = V[2*n2], y2 = V[2*n2+1];
        x3 = V[2*n3], y3 = V[2*n3+1];
        J[k*4+0] = x2 - x1;
        J[k*4+1] = x3 - x1;
        J[k*4+2] = y2 - y1;
        J[k*4+3] = y3 - y1;
        det[k] = J[k*4+0]*J[k*4+3] - J[k*4+1]*J[k*4+2];
        J_inv[k*4+0] = J[k*4+3]/det[k];
        J_inv[k*4+1] = -J[k*4+1]/det[k];
        J_inv[k*4+2] = -J[k*4+2]/det[k];
        J_inv[k*4+3] = J[k*4+0]/det[k];
    }
}

/*
FUNCTIONS FOR CURVED ELEMENTS
*/

void basis_geom_2d(double phi[], double dphi[], double xi, double eta){
    double coef[10][10] = 
                        {
                            {1.,    -5.5,   9.,     -4.5,   -5.5,   18.,    -13.5,  9.,     -13.5,  -4.5},
                            {0,     9.,     -22.5,  13.5,   0,      -22.5,  27,     0,      13.5,   0 },
                            {0,     -4.5,   18,     -13.5,  0,      4.5,    -13.5,  0,      0,      0},
                            {0,     1,      -4.5,   4.5,    0,      4.99e-16,      1.2767e-15,      0 ,     -4.996e-16,      0},
                            {0,     0,      0,      0,      9.,     -22.5,  13.5,   -22.5,  27.,    13.5},
                            {0,     0,      0,      0,      0,      27.,    -27.,   0,      -27.,   0},
                            {0,     0,      0,      0,      0,      -4.5,   13.5,   0,      0,      0},
                            {0,     0,      0,      0,      -4.5,   4.5,    0 ,     18.,    -13.5,  -13.5},
                            {0,     0,      0,      0,      0,      -4.5,   0,      0,      13.5,   0},
                            {0,     0,      0,      0,      1,      4.7184e-16,      -6.3837e-16,      -4.5,   -1.2767e-15,      4.5}
                        };
    int j;
    for(int i=0;i<10;i++){
        j=0;
        for(int s=0; s<4; s++){
            for(int r=0; r<4-s; r++){
                phi[i] += coef[i][j]*pow(xi,r)*pow(eta,s);
                if(r!=0){
                    dphi[2*i] += coef[i][j]*pow(xi,r-1)*pow(eta,s)*r;
                }
                if(s!=0){
                    dphi[2*i+1] += coef[i][j]*pow(xi,r)*pow(eta,s-1)*s;
                }
                j++;            
            }

        }
    }
}

void basis_1d(int np, double phi[],int quad_i, double s){
    if(np==1){
        phi[quad_i] = 1.;
    }
    else if(np==3){
        phi[quad_i*np] = 1-s;
        phi[quad_i*np+1] = s;
    }
    else if(np==6){
        phi[quad_i*np] = ((s-0.5)/(-0.5))*((s-1.)/(-1.));
        phi[quad_i*np+1] = ((s)/(0.5))*((s-1)/(0.5-1.));
        phi[quad_i*np+2] = ((s)/(1.))*((s-0.5)/(1.-0.5));
    }
}

void basis_geom_1d(double phi[], double dphi[], double s){
    phi[0] = 1.5*(-3.0*s + 1.0)*(s - 1.)*(s - 0.666666666666667);
    phi[1] = 13.5*s*(s - 1.)*(s - 0.666666666666667);
    phi[2] = -13.5*s*(s - 1.)*(s - 0.333333333333333);
    phi[3] = 4.5*s*(s - 0.666666666666667)*(s - 0.333333333333333);
    dphi[0] = (-4.5*s + 1.5)*(s - 0.666666666666667) + (-4.5*s + 4.5)*(s - 0.666666666666667) + (-3.0*s + 1.0)*(1.5*s - 1.5);
    dphi[1] = 13.5*s*(s - 1.) + 13.5*s*(s - 0.666666666666667) + (s - 0.666666666666667)*(13.5*s - 13.5);
    dphi[2] = -13.5*s*(s - 1.) - 13.5*s*(s - 0.333333333333333) + (-13.5*s + 13.5)*(s - 0.333333333333333);
    dphi[3] = 4.5*s*(s - 0.666666666666667) + 4.5*s*(s - 0.333333333333333) + (s - 0.666666666666667)*(4.5*s - 1.5);

}

void Jacobian_edge(int elem_i, int E[], double V[], double s, int q,  int nq, double J[],  double det[], int local){
    double phi[4];
    double dphi[4];
    basis_geom_1d(phi, dphi, s);
    int n1[4] = {3, 6, 8, 9};
    int n2[4] = {9, 7, 4, 0};
    int n3[4] = {0, 1, 2, 3};
    int n;
    double x,y;
    double J1=0, J2=0;
    if(local==0){
        for(int i=0;i<4;i++){
            n = E[elem_i*10+n1[i]];
            x = V[n*2];
            y = V[n*2+1];
            J1 += x*dphi[i];
            J2 += y*dphi[i];
        }
    }
    else if(local==1){
        for(int i=0;i<4;i++){
            n = E[elem_i*10+n2[i]];
            x = V[n*2];
            y = V[n*2+1];
            J1 += x*dphi[i];
            J2 += y*dphi[i];
        }
    }
    else if(local==2){
        for(int i=0;i<4;i++){
            n = E[elem_i*10+n3[i]];
            x = V[n*2];
            y = V[n*2+1];
            J1 += x*dphi[i];
            J2 += y*dphi[i];
        }
    }
    J[elem_i*nq*2+2*q] =J1;
    J[elem_i*nq*2+2*q+1] = J2;
    det[elem_i*nq+q] = sqrt(J1*J1+J2*J2);
}

//Jacobian for quad point q
void Jacobian_nonlinear(int elem_i, int E[], double V[], double xi, double eta, int q,  int nq, double J[], double J_inv[], double det[]){
    int NQ = 10; // number of high order geometric points
    int n;
    double x,y;
    double dphig[10*2];
    double phig[10];
    for(int i=0;i<10;i++){
        phig[i] = 0; dphig[2*i]=0;dphig[2*i+1]=0;
    }
    basis_geom_2d(phig, dphig, xi, eta);
    double J1=0 ,J2=0, J3=0, J4=0, determ=0;
    // print_matrix(dphi,0, 1,2*10);
    for(int i=0;i<NQ;i++){
        n = E[elem_i*10+i];
        x = V[n*2];
        y = V[n*2+1];
        J1 +=  x*dphig[2*i+0];
        J2 +=  x*dphig[2*i+1];
        J3 +=  y*dphig[2*i+0];
        J4 +=  y*dphig[2*i+1];
    }
   
    J[elem_i*nq*4+4*q+0] = J1;
    J[elem_i*nq*4+4*q+1] = J2;
    J[elem_i*nq*4+4*q+2] = J3;
    J[elem_i*nq*4+4*q+3] = J4;
    determ = J1*J4 - J2*J3;
    det[elem_i*nq + q]  = determ;
    J_inv[elem_i*nq*4+4*q+0] = J4/determ;
    J_inv[elem_i*nq*4+4*q+1] = -J2/determ;
    J_inv[elem_i*nq*4+4*q+2] = -J3/determ;
    J_inv[elem_i*nq*4+4*q+3] = J1/determ;
}


void M_k(int np, int nq, double M[], int elem_i, double phi[],double det[], double w[]){
    for(int i=0; i<np; i++){
        for(int j=0; j<np; j++){
            for(int q=0; q<nq; q++){
                M[elem_i*np*np + np*i + j] +=  phi[q*np+i]*phi[q*np+j]*det[elem_i*nq+q]*w[q];            }
        }
    }
}

